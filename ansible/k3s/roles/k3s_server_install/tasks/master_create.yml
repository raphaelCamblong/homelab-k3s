---
- name: "[SET UP]Set the first server node IP {{ play_hosts[0] }}"
  set_fact:
    head_server_node_ip: "{{ play_hosts[0] }}"


- name: "[K3S] Install k3s using k3sup create Cluster {{ play_hosts[0] }}"
  become: true
  command: "sudo k3sup install \
    --ip={{ head_server_node_ip }} \
    --user=raphael \
    --ssh-key {{ ssh_key_path }} \
    --sudo \
    --cluster \
    --tls-san={{ kube_vip_endpoint }} \
    --k3s-channel=stable \
    --k3s-extra-args {{ k3s_args }} \
    --print-command \
    --context={{ cluster_name }}"
  register: script_output
  delegate_to: localhost
  run_once: true

- debug:
    msg: "{{ script_output.stdout }}"

- name: "[Metal-lb] Transfer and run kube-vip script"
  script:
    "../files/install_kubeVIP.sh {{ interface }} {{ kube_vip_endpoint }}"
  register: metal_lb_output
  run_once: true

- debug:
    msg: "{{ metal_lb_output.stdout }}"

- name: "[K3S] get config kubectl"
  become: true
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "../exported_k3s_config"
    flat: yes
  register: fetch_config_output

- name: "[K3S] merge kubectl"
  become: true
  script:
    "../files/merge_kubectl.py {{ kube_vip_endpoint }} {{ cluster_name }}"
  args:
    chdir: "{{ playbook_dir }}"
  delegate_to: localhost
  run_once: true

- name: Wait for all k8s nodes to be ready
  command: "kubectl wait --for=condition=Ready nodes --all --timeout=600s"
  delegate_to: localhost
  register: nodes_ready

- debug: var=nodes_ready.stdout_lines

